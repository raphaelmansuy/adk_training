.PHONY: help setup clean test demo dev

help:
	@echo "Pause/Resume Invocations TIL - Available Commands"
	@echo "=================================================="
	@echo ""
	@echo "make setup       Install dependencies and prepare environment"
	@echo "make test        Run unit tests (validates configuration)"
	@echo "make dev         Launch ADK web interface to test pause/resume"
	@echo "make demo        Quick validation without web interface"
	@echo "make clean       Remove cache files and artifacts"
	@echo ""

setup:
	pip install -r requirements.txt
	pip install -e .
	cp pause_resume_agent/.env.example pause_resume_agent/.env
	@echo ""
	@echo "‚úÖ Setup complete!"
	@echo ""
	@echo "Next steps:"
	@echo "1. Add your GOOGLE_API_KEY to pause_resume_agent/.env"
	@echo "2. Run 'make test' to validate the implementation"
	@echo "3. Run 'make dev' to launch web interface and test pause/resume"
	@echo ""

dev:
	@echo ""
	@echo "üöÄ Launching ADK web interface..."
	@echo ""
	@echo "üìù How to test Pause/Resume Invocations:"
	@echo "   1. Open http://localhost:8000"
	@echo "   2. Select 'pause_resume_agent'"
	@echo "   3. Start a long conversation or data processing task"
	@echo "   4. Check Events tab to see checkpoint events"
	@echo ""
	@echo "üí° What to look for:"
	@echo "   ‚Ä¢ 'end_of_agent' events marking checkpoints"
	@echo "   ‚Ä¢ 'agent_state' field in checkpoint events"
	@echo "   ‚Ä¢ State preservation across invocations"
	@echo "   ‚Ä¢ Tool execution with checkpoint data"
	@echo ""
	@echo "üéØ Try these test patterns:"
	@echo "   1. Process data with: 'Please process this data: <text>'"
	@echo "   2. Ask for hints: 'What checkpoint should I use?'"
	@echo "   3. Validate: 'Can you validate this checkpoint?'"
	@echo ""
	@echo "‚è∏Ô∏è  Testing Pause & Resume Workflow:"
	@echo "   Step 1: Send initial message"
	@echo "     ‚Üí Agent processes and creates checkpoint"
	@echo "     ‚Üí Copy the invocation_id from the Events tab"
	@echo ""
	@echo "   Step 2: [PAUSE] Note the invocation_id and agent_state"
	@echo "     ‚Üí Check Events tab for 'end_of_agent: true'"
	@echo "     ‚Üí Observe the serialized agent_state field"
	@echo ""
	@echo "   Step 3: [Later] Resume with the same invocation_id"
	@echo "     ‚Üí Send a new message or use the session"
	@echo "     ‚Üí State will be automatically restored"
	@echo ""
	@echo "   Step 4: Verify state restoration"
	@echo "     ‚Üí Agent continues from last checkpoint"
	@echo "     ‚Üí Compare new events with previous state"
	@echo ""
	@echo "üìä Events to examine:"
	@echo "   ‚Ä¢ Look for events where 'end_of_agent' = true"
	@echo "   ‚Ä¢ Check 'agent_state' contains your checkpoint data"
	@echo "   ‚Ä¢ Verify 'actions' field includes state info"
	@echo "   ‚Ä¢ Track 'invocation_id' for resumption"
	@echo ""
	adk web

test:
	@echo ""
	@echo "üß™ Running Pause/Resume Invocation Tests..."
	@echo ""
	@pytest tests/ -v --tb=short
	@echo ""
	@echo "‚úÖ Tests validate:"
	@echo "   ‚Ä¢ Agent configuration (6 tests)"
	@echo "   ‚Ä¢ Tool functionality (8 tests)"
	@echo "   ‚Ä¢ Import paths (3 tests)"
	@echo "   ‚Ä¢ App & resumability setup (2 tests)"
	@echo ""
	@echo "üìã Test Coverage:"
	@echo "   ‚úì Agent name, model, description, instruction"
	@echo "   ‚úì Agent has tools configured (3 tools)"
	@echo "   ‚úì process_data_chunk() with valid/empty data"
	@echo "   ‚úì validate_checkpoint() with valid/empty data"
	@echo "   ‚úì get_resumption_hint() with different contexts"
	@echo "   ‚úì Agent exports correctly for discovery"
	@echo "   ‚úì App has correct name and root_agent"
	@echo "   ‚úì Resumability config enabled (is_resumable: true)"
	@echo ""
	@echo "üîç What each test verifies:"
	@echo "   Agent Configuration Tests:"
	@echo "     - Agent loads with correct name: pause_resume_agent"
	@echo "     - Model is set to: gemini-2.0-flash"
	@echo "     - Description and instruction are present"
	@echo "     - All 3 tools are available"
	@echo ""
	@echo "   Tool Functionality Tests:"
	@echo "     - process_data_chunk handles success/error cases"
	@echo "     - validate_checkpoint validates state integrity"
	@echo "     - get_resumption_hint provides context-aware hints"
	@echo ""
	@echo "   Import & Configuration Tests:"
	@echo "     - Agent can be imported from package"
	@echo "     - App configuration is correct"
	@echo "     - ResumabilityConfig is properly enabled"
	@echo ""
	@echo "üí° To run specific test:"
	@echo "   pytest tests/test_agent.py::TestAgentConfiguration -v"
	@echo "   pytest tests/test_agent.py::TestAgentTools -v"
	@echo ""
	@echo "üìä To see test coverage:"
	@echo "   pytest tests/ --cov=pause_resume_agent --cov-report=html"
	@echo ""

demo:
	@echo ""
	@echo "üîç Quick validation..."
	python -c "from pause_resume_agent import root_agent; from app import app; print('‚úÖ Agent loaded:', root_agent.name); print('‚úÖ App configured:', app.name); print('‚úÖ Resumability enabled:', app.resumability_config.is_resumable if app.resumability_config else False)"
	@echo ""
	@echo "üéØ Implementation is ready!"
	@echo ""

clean:
	find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name .pytest_cache -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete
	rm -rf .coverage htmlcov build dist *.egg-info
	@echo "‚úÖ Cleaned up cache files"
