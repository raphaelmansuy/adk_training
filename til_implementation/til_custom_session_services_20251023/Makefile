.PHONY: setup clean test dev demo docker-up docker-down help

help:
	@echo "=============================================================================="
	@echo "  Custom Session Services TIL - Available Commands"
	@echo "=============================================================================="
	@echo ""
	@echo "📋 QUICK START:"
	@echo "  make setup                - Install all dependencies and package"
	@echo "  make dev                  - Start ADK web (runs docker-up first)"
	@echo "  make demo                 - Show detailed demo and testing guide"
	@echo ""
	@echo "🐳 DOCKER SERVICES:"
	@echo "  make docker-up            - Start Redis (6379) and MongoDB (27017)"
	@echo "  make docker-down          - Stop Docker containers"
	@echo "  make docker-logs          - View real-time container logs"
	@echo ""
	@echo "🧪 UNIT TESTING:"
	@echo "  make test                 - Run all tests with coverage report"
	@echo "  make test-watch           - Run tests in watch mode"
	@echo "  make test-verbose         - Run tests with verbose output (-vv -s)"
	@echo ""
	@echo "🧹 CLEANUP:"
	@echo "  make clean                - Remove .pyc, cache, artifacts"
	@echo "  make clean-all            - Full cleanup + remove Docker volumes"
	@echo ""
	@echo "=============================================================================="
	@echo "  For session persistence testing, use: make demo"
	@echo "=============================================================================="

setup:
	@echo "Installing dependencies..."
	pip install -r requirements.txt
	pip install -e .
	@echo "✅ Setup complete!"

docker-up:
	@echo "Starting Docker services (Redis and MongoDB)..."
	docker-compose up -d
	@echo "⏳ Waiting for services to be ready..."
	sleep 3
	@echo "✅ Services started!"
	@echo ""
	@echo "Redis:    redis://localhost:6379"
	@echo "MongoDB:  mongodb://localhost:27017"

docker-down:
	@echo "Stopping Docker services..."
	docker-compose down
	@echo "✅ Services stopped!"

docker-logs:
	docker-compose logs -f

dev: docker-up
	@echo "Starting ADK web interface with Redis session service..."
	@echo "Note: Using entry point pattern to register services BEFORE ADK CLI"
	@echo "This ensures Redis service is available when ADK initializes"
	@echo ""
	python -m custom_session_agent web --session_service_uri=redis://localhost:6379

demo:
	@echo ""
	@echo "╔══════════════════════════════════════════════════════════════════════════════╗"
	@echo "║           CUSTOM SESSION SERVICES - COMPREHENSIVE DEMO & TESTING             ║"
	@echo "╚══════════════════════════════════════════════════════════════════════════════╝"
	@echo ""
	@echo "📚 WHAT THIS TIL TEACHES:"
	@echo "   • Service Registry pattern - Maps URI schemes to factory functions"
	@echo "   • Factory Function Pattern - URI → Service Instance creation"
	@echo "   • BaseSessionStorage inheritance - Implementing custom backends"
	@echo "   • Session persistence - How data survives across requests"
	@echo "   • Multi-backend support - Redis, MongoDB, PostgreSQL, DynamoDB, etc."
	@echo ""
	@echo "════════════════════════════════════════════════════════════════════════════════"
	@echo "🚀 STEP-BY-STEP: HOW TO RUN AND TEST"
	@echo "════════════════════════════════════════════════════════════════════════════════"
	@echo ""
	@echo "STEP 1️⃣  - SETUP ENVIRONMENT"
	@echo "────────────────────────────────────────────────────────────────────────────────"
	@echo "   Command: make setup"
	@echo "   What it does:"
	@echo "     • Installs dependencies (google-adk>=1.17.0, google-genai, redis, pymongo)"
	@echo "     • Installs custom-session-agent package in editable mode"
	@echo "     • Makes agent discoverable by ADK web interface"
	@echo ""
	@echo "STEP 2️⃣  - START DOCKER SERVICES"
	@echo "────────────────────────────────────────────────────────────────────────────────"
	@echo "   Command: make docker-up"
	@echo "   What it does:"
	@echo "     • Starts Redis container (port 6379)"
	@echo "     • Starts MongoDB container (port 27017)"
	@echo "     • Waits for health checks to pass"
	@echo "   Services running:"
	@echo "     ✓ Redis:   redis://localhost:6379"
	@echo "     ✓ MongoDB: mongodb://localhost:27017"
	@echo ""
	@echo "STEP 3️⃣  - START ADK WEB INTERFACE"
	@echo "────────────────────────────────────────────────────────────────────────────────"
	@echo "   Command: make dev"
	@echo "   What it does:"
	@echo "     • Starts FastAPI/Uvicorn server"
	@echo "     • Loads custom_session_agent and registers Redis service"
	@echo "     • Makes agent discoverable in dropdown"
	@echo "   Server URL: http://127.0.0.1:8000"
	@echo "   Session Backend: Redis (configured in agent initialization)"
	@echo ""
	@echo "STEP 4️⃣  - OPEN BROWSER & SELECT AGENT"
	@echo "────────────────────────────────────────────────────────────────────────────────"
	@echo "   1. Open: http://127.0.0.1:8000"
	@echo "   2. Click dropdown: 'Select an agent'"
	@echo "   3. Choose: 'custom_session_agent'"
	@echo "   4. Click 'Select' to load the agent"
	@echo ""
	@echo "════════════════════════════════════════════════════════════════════════════════"
	@echo "🧪 SESSION PERSISTENCE TESTING"
	@echo "════════════════════════════════════════════════════════════════════════════════"
	@echo ""
	@echo "TEST 1: SESSION INFO TOOL"
	@echo "────────────────────────────────────────────────────────────────────────────────"
	@echo "   1. Send message: 'Show my session info'"
	@echo "   2. Agent will use 'describe_session_info' tool"
	@echo "   3. Tool returns:"
	@echo "      - session_id: Your unique session identifier"
	@echo "      - backend: Service registry configuration"
	@echo "      - persistence: Status of persistence"
	@echo "   4. Copy the session_id value"
	@echo ""
	@echo "TEST 2: TEST SESSION PERSISTENCE"
	@echo "────────────────────────────────────────────────────────────────────────────────"
	@echo "   1. Send message: 'Store test_key in session with value test_123'"
	@echo "   2. Agent uses 'test_session_persistence' tool"
	@echo "   3. Tool stores data in session:"
	@echo "      - key: test_key"
	@echo "      - value: test_123"
	@echo "   4. Tool output shows redis-cli command to verify"
	@echo ""
	@echo "TEST 3: VERIFY SESSION PERSISTENCE (Browser Refresh)"
	@echo "────────────────────────────────────────────────────────────────────────────────"
	@echo "   1. AFTER storing data (Step 2 above)"
	@echo "   2. Press F5 or Cmd+R to REFRESH the browser page"
	@echo "   3. The session should still be available! ✅"
	@echo "   4. Send: 'Show my session info' again"
	@echo "   5. Notice: Same session_id! Session persisted across requests!"
	@echo ""
	@echo "TEST 4: VERIFY IN REDIS (Terminal)"
	@echo "────────────────────────────────────────────────────────────────────────────────"
	@echo "   ADK stores sessions in Redis using the agent's session service!"
	@echo ""
	@echo "   1. Open a new terminal"
	@echo "   2. Run: docker-compose exec redis redis-cli"
	@echo "   3. Check for session keys:"
	@echo "      > KEYS *                    (see all keys)"
	@echo "      > KEYS session:*            (see all session keys)"
	@echo ""
	@echo "   4. Session data is stored as JSON"
	@echo "      > SCAN 0                    (scan with cursor)"
	@echo "      > GET <key_name>            (view session JSON data)"
	@echo ""
	@echo "   ✅ If you see keys, your session is persisted in Redis!"
	@echo "   ✅ Refresh browser and run commands again - same data appears!"
	@echo ""
	@echo "════════════════════════════════════════════════════════════════════════════════"
	@echo "🔍 TOOLS AVAILABLE IN THE AGENT"
	@echo "════════════════════════════════════════════════════════════════════════════════"
	@echo ""
	@echo "1. describe_session_info(session_id)"
	@echo "   • Shows current session details"
	@echo "   • Returns: session_id, backend, persistence status"
	@echo ""
	@echo "2. test_session_persistence(key, value)"
	@echo "   • Stores data in session"
	@echo "   • Useful for testing persistence"
	@echo "   • Returns: key, value, storage backend info"
	@echo ""
	@echo "3. show_service_registry_info()"
	@echo "   • Explains the service registry pattern"
	@echo "   • Shows how factories work"
	@echo "   • Returns: Example code snippets"
	@echo ""
	@echo "4. get_session_backend_guide()"
	@echo "   • Compares Redis, MongoDB, Memory backends"
	@echo "   • Shows pros/cons of each backend"
	@echo "   • Returns: Selection guide with use cases"
	@echo ""
	@echo "════════════════════════════════════════════════════════════════════════════════"
	@echo "📊 UNIT TESTING"
	@echo "════════════════════════════════════════════════════════════════════════════════"
	@echo ""
	@echo "Run tests without Docker (mocked services):"
	@echo "   Command: make test"
	@echo "   • Runs tests/test_imports.py - Validates all imports"
	@echo "   • Runs tests/test_tools.py - Tests all 4 tools"
	@echo "   • Runs tests/test_agent.py - Tests agent configuration"
	@echo "   • Generates coverage report"
	@echo ""
	@echo "Watch mode (auto-rerun on changes):"
	@echo "   Command: make test-watch"
	@echo ""
	@echo "Verbose output (see all assertions):"
	@echo "   Command: make test-verbose"
	@echo ""
	@echo "════════════════════════════════════════════════════════════════════════════════"
	@echo "🔑 KEY LEARNING POINTS"
	@echo "════════════════════════════════════════════════════════════════════════════════"
	@echo ""
	@echo "1. SERVICE REGISTRY PATTERN"
	@echo "   • Maps URI schemes (redis://, mongodb://) to factory functions"
	@echo "   • Example: registry.register_session_service('redis', redis_factory)"
	@echo ""
	@echo "2. FACTORY FUNCTION PATTERN"
	@echo "   • Takes URI string as input"
	@echo "   • Returns configured service instance"
	@echo "   • Always pop 'agents_dir' from kwargs!"
	@echo ""
	@echo "3. INHERITANCE"
	@echo "   • Custom services must inherit from BaseSessionService"
	@echo "   • Implement async methods: save, load, delete, list"
	@echo ""
	@echo "4. MULTI-BACKEND SUPPORT"
	@echo "   • Register multiple services simultaneously"
	@echo "   • Use adk web --session_service_uri=redis://localhost:6379"
	@echo "   • Switch backends without changing code!"
	@echo ""
	@echo "════════════════════════════════════════════════════════════════════════════════"
	@echo "⚙️  TROUBLESHOOTING"
	@echo "════════════════════════════════════════════════════════════════════════════════"
	@echo ""
	@echo "❌ Agent not in dropdown?"
	@echo "   → Run: make setup (installs package in editable mode)"
	@echo ""
	@echo "❌ Services not starting?"
	@echo "   → Check Docker: docker ps"
	@echo "   → Run: make docker-up again"
	@echo ""
	@echo "❌ Tests failing?"
	@echo "   → Run: make test-verbose (see detailed output)"
	@echo "   → Ensure dependencies installed: make setup"
	@echo ""
	@echo "❌ Session not persisting?"
	@echo "   → Check Redis: docker-compose exec redis redis-cli PING"
	@echo "   → View logs: make docker-logs"
	@echo ""
	@echo "════════════════════════════════════════════════════════════════════════════════"
	@echo "📖 DOCUMENTATION"
	@echo "════════════════════════════════════════════════════════════════════════════════"
	@echo ""
	@echo "  • TIL Document: /docs/docs/til/til_custom_session_services_20251023.md"
	@echo "  • README:       ./README.md"
	@echo "  • Agent Code:   ./custom_session_agent/agent.py"
	@echo "  • Tests:        ./tests/"
	@echo ""
	@echo "════════════════════════════════════════════════════════════════════════════════"
	@echo "🎯 COMPLETE WORKFLOW"
	@echo "════════════════════════════════════════════════════════════════════════════════"
	@echo ""
	@echo "  1. make setup          (Install everything)"
	@echo "  2. make demo           (Read this guide)"
	@echo "  3. make dev            (Start server)"
	@echo "  4. Open http://127.0.0.1:8000"
	@echo "  5. Select custom_session_agent"
	@echo "  6. Test session persistence:"
	@echo "     - Send: 'Show my session info'"
	@echo "     - Send: 'Store data in session'"
	@echo "     - Refresh browser (F5)"
	@echo "     - Send: 'Show my session info' again"
	@echo "  7. Verify in Redis:"
	@echo "     - docker-compose exec redis redis-cli"
	@echo "     - KEYS *"
	@echo ""
	@echo "════════════════════════════════════════════════════════════════════════════════"
	@echo ""

test:
	@echo "Running tests with coverage..."
	pytest tests/ -v --cov=custom_session_agent --cov-report=term-missing
	@echo "✅ Tests complete!"

test-watch:
	@echo "Running tests in watch mode..."
	pytest-watch tests/

test-verbose:
	@echo "Running tests with verbose output..."
	pytest tests/ -vv -s

clean:
	@echo "Cleaning up cache files..."
	find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete
	find . -type f -name "*.pyo" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name ".coverage" -delete
	@echo "✅ Cleanup complete!"

clean-all: clean docker-down
	@echo "Removing Docker volumes..."
	docker-compose down -v
	@echo "✅ Full cleanup complete!"
