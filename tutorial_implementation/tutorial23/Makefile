# Tutorial 23: Production Deployment Implementation
# Makefile for development, testing, and deployment guidance

.PHONY: help setup dev test demo clean check-env server server-docs
.PHONY: demo-info demo-scenarios demo-deployment

# Default target - show help
help:
	@echo "üöÄ Tutorial 23: Production Deployment Implementation"
	@echo ""
	@echo "üìã QUICK START:"
	@echo "  make setup    # Install dependencies"
	@echo "  make demo     # Show deployment strategies"
	@echo ""
	@echo "üéØ DEVELOPMENT COMMANDS:"
	@echo "  make setup    # Install dependencies and package"
	@echo "  make dev      # Start ADK web interface (requires GOOGLE_API_KEY)"
	@echo "  make test     # Run comprehensive test suite"
	@echo ""
	@echo "üé™ DEMO COMMANDS:"
	@echo "  make demo               # Show all deployment info (default)"
	@echo "  make demo-info          # Deployment concepts and best practices"
	@echo "  make demo-scenarios     # Real-world deployment scenarios"
	@echo "  make demo-deployment    # Deployment commands reference"
	@echo ""
	@echo "üåê SERVER COMMANDS:"
	@echo "  make server             # Start custom FastAPI server"
	@echo "  make server-docs        # Show FastAPI documentation info"
	@echo ""
	@echo "üßπ MAINTENANCE:"
	@echo "  make clean    # Remove cache files and artifacts"
	@echo ""
	@echo "üìñ LEARN MORE: https://github.com/raphaelmansuy/adk_training/tree/main/docs/tutorial/23_production_deployment.md"

# Setup environment
setup:
	@echo "üì¶ Setting up Tutorial 23 environment..."
	pip install -r requirements.txt
	pip install -e .
	@echo "‚úÖ Setup complete!"
	@echo ""
	@echo "üí° Next steps:"
	@echo "   1. Set your API key: export GOOGLE_API_KEY=your_api_key"
	@echo "   2. Try the demo:     make demo"
	@echo "   3. Run tests:        make test"
	@echo "   4. Start dev:        make dev"
	@echo ""
	@echo "üîë Get a free API key at: https://aistudio.google.com/app/apikey"

# Start ADK web interface
dev: check-env
	@echo "ü§ñ Starting Production Deployment Agent..."
	@echo "üåê Open http://localhost:8000 in your browser"
	@echo "üéØ Select 'production_deployment_agent' from the dropdown"
	@echo ""
	@echo "üí¨ Try these prompts:"
	@echo "   ‚Ä¢ 'What deployment options are available?'"
	@echo "   ‚Ä¢ 'How do I deploy to Cloud Run?'"
	@echo "   ‚Ä¢ 'What are best practices for production?'"
	@echo "   ‚Ä¢ 'Show me health check configuration'"
	@echo ""
	adk web

# Run tests
test: check-env
	@echo "üß™ Running comprehensive test suite..."
	pytest tests/ -v --cov=production_agent --cov-report=term-missing
	@echo ""
	@echo "‚úÖ All tests completed!"

# Main demo - show all deployment information
demo: demo-info demo-deployment demo-scenarios

# Demo: Deployment concepts and best practices
demo-info:
	@echo ""
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo "üìö PRODUCTION DEPLOYMENT CONCEPTS"
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo ""
	@echo "üéØ DEPLOYMENT STRATEGIES:"
	@echo "   ‚Ä¢ Local Development: Quick testing and iteration"
	@echo "   ‚Ä¢ API Server: Expose agent as REST endpoints"
	@echo "   ‚Ä¢ Cloud Run: Serverless container deployment"
	@echo "   ‚Ä¢ Agent Engine: Managed enterprise deployment"
	@echo "   ‚Ä¢ GKE: Kubernetes for scalable deployments"
	@echo ""
	@echo "üîí BEST PRACTICES:"
	@echo "   ‚Ä¢ Security: Use service accounts, not API keys"
	@echo "   ‚Ä¢ Monitoring: Track metrics and errors"
	@echo "   ‚Ä¢ Health Checks: Implement liveness probes"
	@echo "   ‚Ä¢ Scalability: Use auto-scaling for load"
	@echo "   ‚Ä¢ Reliability: Implement retries and timeouts"
	@echo ""
	@echo "üìä KEY METRICS:"
	@echo "   ‚Ä¢ Request latency and throughput"
	@echo "   ‚Ä¢ Error rates and types"
	@echo "   ‚Ä¢ Resource usage (CPU, memory, network)"
	@echo "   ‚Ä¢ Uptime and availability"
	@echo ""

# Demo: Real-world deployment scenarios
demo-scenarios:
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo "üé¨ DEPLOYMENT SCENARIOS"
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo ""
	@echo "üìù Scenario 1: Initial Development"
	@echo "   Goal: Quickly iterate on agent logic"
	@echo "   Command: make dev"
	@echo "   Tools: ADK Web UI for testing"
	@echo ""
	@echo "üìù Scenario 2: Local Testing"
	@echo "   Goal: Test agent as REST API"
	@echo "   Command: make server"
	@echo "   Endpoint: http://localhost:8000/invoke"
	@echo ""
	@echo "üìù Scenario 3: Production on Cloud Run"
	@echo "   Goal: Deploy to serverless environment"
	@echo "   Steps:"
	@echo "      1. Create Docker image"
	@echo "      2. Push to Google Container Registry"
	@echo "      3. Deploy with: adk deploy cloud_run"
	@echo ""
	@echo "üìù Scenario 4: Enterprise Deployment"
	@echo "   Goal: Use Google's managed Agent Engine"
	@echo "   Command: adk deploy agent_engine"
	@echo "   Features: Full monitoring, scaling, security"
	@echo ""

# Demo: Deployment commands reference
demo-deployment:
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo "‚öôÔ∏è  DEPLOYMENT COMMANDS REFERENCE"
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo ""
	@echo "üè† Local Development:"
	@echo "   adk web                           # Start ADK web UI"
	@echo "   adk api_server                    # Start API server locally"
	@echo ""
	@echo "‚òÅÔ∏è  Cloud Deployment:"
	@echo "   adk deploy cloud_run --project PROJECT --region REGION"
	@echo "      Deploy to Google Cloud Run (serverless)"
	@echo ""
	@echo "ü§ñ Managed Deployment:"
	@echo "   adk deploy agent_engine --project PROJECT --region REGION"
	@echo "      Deploy to Google's managed Agent Engine"
	@echo ""
	@echo "üê≥ Kubernetes Deployment:"
	@echo "   adk deploy gke                    # Deploy to GKE cluster"
	@echo ""
	@echo "üí° Example: Deploy to Cloud Run in us-central1"
	@echo "   adk deploy cloud_run --project my-project --region us-central1"
	@echo ""

# Start custom FastAPI server
server: check-env
	@echo "üöÄ Starting Production Deployment FastAPI Server..."
	@echo ""
	@echo "üìç Server Details:"
	@echo "   ‚Ä¢ URL: http://localhost:8000"
	@echo "   ‚Ä¢ Docs: http://localhost:8000/docs"
	@echo "   ‚Ä¢ Health: http://localhost:8000/health"
	@echo ""
	@echo "üéØ Example Requests:"
	@echo "   # Health check"
	@echo "   curl http://localhost:8000/health"
	@echo ""
	@echo "   # Invoke agent"
	@echo "   curl -X POST http://localhost:8000/invoke \\  "
	@echo "     -H 'Content-Type: application/json' \\"
	@echo "     -d '{\"query\": \"What are deployment options?\"}'"
	@echo ""
	@echo "Press Ctrl+C to stop the server"
	@echo ""
	python -m uvicorn production_agent.server:app --reload

# Show FastAPI documentation info
server-docs:
	@echo ""
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo "üìö FASTAPI SERVER DOCUMENTATION"
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo ""
	@echo "üöÄ Start the server:"
	@echo "   make server"
	@echo ""
	@echo "üìñ Access Documentation:"
	@echo "   ‚Ä¢ Swagger UI: http://localhost:8000/docs"
	@echo "   ‚Ä¢ ReDoc: http://localhost:8000/redoc"
	@echo ""
	@echo "üîå API Endpoints:"
	@echo ""
	@echo "   GET /health"
	@echo "      Check server health and uptime"
	@echo "      Returns: uptime (seconds), request_count, status"
	@echo ""
	@echo "   POST /invoke"
	@echo "      Invoke the production deployment agent"
	@echo "      Body: { \"query\": \"your prompt here\" }"
	@echo "      Returns: { \"response\": \"...\", \"status\": \"success\" }"
	@echo ""
	@echo "   GET /"
	@echo "      API root information"
	@echo ""
	@echo "üí° Python Example:"
	@echo "   import requests"
	@echo "   response = requests.post("
	@echo "       'http://localhost:8000/invoke',"
	@echo "       json={'query': 'What deployment options are available?'}"
	@echo "   )"
	@echo "   print(response.json()['response'])"
	@echo ""

# Clean up cache files
clean:
	@echo "üßπ Cleaning up cache files and artifacts..."
	find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete 2>/dev/null || true
	find . -type f -name "*.pyo" -delete 2>/dev/null || true
	find . -type f -name "*.pyd" -delete 2>/dev/null || true
	find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name .pytest_cache -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name .coverage -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name .coverage -delete 2>/dev/null || true
	find . -type f -name coverage.xml -delete 2>/dev/null || true
	@echo "‚úÖ Cleanup completed!"

# Check environment (internal use)
check-env:
	@if [ -z "$$GOOGLE_API_KEY" ] && [ -z "$$GOOGLE_APPLICATION_CREDENTIALS" ]; then \
		echo "‚ùå Error: Authentication not configured"; \
		echo ""; \
		echo "Choose one of the following authentication methods:"; \
		echo ""; \
		echo "üîë Method 1 - API Key (Gemini API):"; \
		echo "   export GOOGLE_API_KEY=your_api_key_here"; \
		echo "   Get a free key at: https://aistudio.google.com/app/apikey"; \
		echo ""; \
		echo "üîê Method 2 - Service Account (VertexAI):"; \
		echo "   export GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json"; \
		echo "   export GOOGLE_CLOUD_PROJECT=your_project_id"; \
		echo "   Create credentials at: https://console.cloud.google.com/iam-admin/serviceaccounts"; \
		echo ""; \
		exit 1; \
	fi
