# Strategic Problem Solver - Tutorial 12: Planners & Thinking Configuration
# Makefile for development, testing, and deployment

.PHONY: help setup dev test demo examples clean lint format

# Default target
help:
	@echo "Strategic Problem Solver - Tutorial 12"
	@echo ""
	@echo "Available commands:"
	@echo "  setup     Install dependencies and package in development mode"
	@echo "  dev       Start ADK web interface (http://localhost:8000)"
	@echo "  test      Run comprehensive test suite (60+ tests)"
	@echo "  demo      Run automated strategic problem-solving examples"
	@echo "  examples  Show example queries you can test with the agents"
	@echo "  clean     Remove cache files and artifacts"
	@echo "  lint      Check code style with flake8"
	@echo "  format    Format code with black"

# Setup environment
setup:
	pip install -r requirements.txt
	pip install -e .[dev]

# Start development server
dev:
	@echo "Starting ADK web interface..."
	@echo "Open http://localhost:8000 in your browser"
	@echo "Select 'strategic_solver' from the agent dropdown"
	adk web

# Run tests
test:
	pytest tests/ -v --cov=strategic_solver --cov-report=term-missing

# Run demo examples
demo:
	@echo "Running strategic problem-solving examples..."
	@echo "This will demonstrate all three planner types (BuiltInPlanner, PlanReActPlanner, StrategicPlanner)"
	@echo "with different business scenarios."
	@echo ""
	python -c "import asyncio; from strategic_solver.agent import demo_strategic_planning; asyncio.run(demo_strategic_planning())"

# Show example queries to test
examples:
	@echo "Strategic Problem Solver - Example Queries to Test"
	@echo "=================================================="
	@echo ""
	@echo "Try these queries in the ADK web interface (make dev) or with the agents:"
	@echo ""
	@echo "üìä MARKET ANALYSIS QUERIES:"
	@echo "  ‚Ä¢ Should we expand into the Asian healthcare market?"
	@echo "  ‚Ä¢ Is the European fintech sector worth entering?"
	@echo "  ‚Ä¢ Analyze market opportunity for AI consulting services"
	@echo ""
	@echo "üí∞ FINANCIAL ANALYSIS QUERIES:"
	@echo '  ‚Ä¢ Should we invest $$2M in renewable energy startup?'
	@echo '  ‚Ä¢ Is this $$500K investment in AI technology worth the risk?'
	@echo "  ‚Ä¢ Calculate ROI for a 3-year investment with 15% annual return"
	@echo ""
	@echo "‚ö†Ô∏è  RISK ASSESSMENT QUERIES:"
	@echo "  ‚Ä¢ How should we mitigate cybersecurity threats in our fintech startup?"
	@echo "  ‚Ä¢ What are the risks of entering the European market?"
	@echo "  ‚Ä¢ Assess business risks for a new product launch"
	@echo ""
	@echo "üéØ STRATEGIC PLANNING QUERIES:"
	@echo '  ‚Ä¢ We have $$1M to invest - should we expand current business or enter new market?'
	@echo "  ‚Ä¢ Design a 5-year growth strategy for our SaaS company"
	@echo "  ‚Ä¢ How should we respond to increasing market competition?"
	@echo ""
	@echo "ü§ñ PLANNER COMPARISON:"
	@echo "  Each agent uses different planning approaches:"
	@echo "  ‚Ä¢ BuiltInPlanner: Shows transparent thinking process"
	@echo "  ‚Ä¢ PlanReActPlanner: Uses structured Plan‚ÜíReason‚ÜíAct‚ÜíObserve‚ÜíReplan"
	@echo "  ‚Ä¢ StrategicPlanner: Domain-specific business strategy workflow"
	@echo ""
	@echo "üí° TIPS:"
	@echo "  ‚Ä¢ Complex queries work better with planners than simple ones"
	@echo "  ‚Ä¢ BuiltInPlanner shows its reasoning - great for learning"
	@echo "  ‚Ä¢ PlanReActPlanner is systematic and thorough"
	@echo "  ‚Ä¢ StrategicPlanner follows business consulting methodology"

# Clean up
clean:
	find . -type d -name __pycache__ -exec rm -rf {} +
	find . -type f -name "*.pyc" -delete
	find . -type f -name "*.pyo" -delete
	find . -type f -name "*.pyd" -delete
	find . -type f -name ".coverage" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	find . -type d -name ".pytest_cache" -exec rm -rf {} +

# Code quality
lint:
	flake8 strategic_solver/ tests/
	black --check strategic_solver/ tests/

format:
	black strategic_solver/ tests/